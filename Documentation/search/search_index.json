{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>This document provides a comprehensive guide to the \"Mechano\" car repair website template, a Next.js application designed for automotive businesses. This template offers a modern, customizable design and features to attract clients.</p>"},{"location":"#i-overview","title":"I. Overview","text":"<p>The Mechano template is a ready-to-use landing page designed to showcase your car repair services effectively.  It features a clean, modern design, intuitive navigation, and compelling visual elements to capture user attention. The template includes sections for showcasing services, testimonials, contact information, and more.  Its structure is designed for easy customization to reflect your brand identity and specific service offerings.  The responsive design ensures optimal viewing across various devices.</p>"},{"location":"#ii-key-features","title":"II. Key Features","text":"<ul> <li>Modern and Clean Design:  A visually appealing and user-friendly interface.</li> <li>Responsive Design:  Adapts seamlessly to various screen sizes (desktops, tablets, and smartphones).</li> <li>Multiple Sections: Includes dedicated sections for highlighting services, displaying testimonials, showcasing your process, and providing contact information.</li> <li>Customizable:  Easily modify text, images, and colors to match your branding.</li> <li>Smooth Animations (using <code>motion</code>):  Engaging animations enhance user experience.</li> <li>Integrated Slider (using <code>swiper</code>):  Provides an elegant way to showcase images or content.</li> <li>Notification System (using <code>react-toastify</code>): Improves user experience with feedback mechanisms.</li> <li>SEO Friendly (Next.js):   Next.js's capabilities contribute to improved search engine optimization.</li> <li>Loading Indicator: A smooth loading experience is provided through a custom loading state management system.</li> </ul>"},{"location":"#iii-technology-stack","title":"III. Technology Stack","text":"<p>The template utilizes a robust technology stack, ensuring performance, scalability, and maintainability:</p> <ul> <li>Next.js (v15.1.7):  A React framework for building high-performance web applications with features like server-side rendering (SSR).</li> <li>React (v19.0.0):  A JavaScript library for building user interfaces.</li> <li>React DOM (v19.0.0):  The library that allows React components to interact with the DOM.</li> <li>TypeScript (v5):  Provides static typing for enhanced code quality and maintainability.</li> <li>Tailwind CSS (v4.0.6):  A utility-first CSS framework for rapid UI development.</li> <li>React Icons (v5.4.0):  Provides access to various icons for use within the UI.</li> <li>React Toastify (v11.0.3):  A library for displaying notifications and alerts.</li> <li>Swiper (v11.2.4):  A mobile-first touch-friendly JavaScript framework for creating sliders.</li> <li>Framer Motion (v12.4.3):  Production-ready motion library for React.</li> </ul> <p>This overview highlights the key aspects of the Mechano car repair website template. Subsequent sections will delve into more detailed instructions for customization and implementation.</p>"},{"location":"component-customization/","title":"Component Customization","text":"<p>This document illustrates the component hierarchy used to construct the Mechano car repair website, as defined in <code>page.tsx</code> and <code>layout.tsx</code>, and provides guidance on customizing these components.</p>"},{"location":"component-customization/#i-overall-structure","title":"I. Overall Structure","text":"<p>The website's structure is built using Next.js's <code>App</code> directory structure. The <code>layout.tsx</code> file defines the overall HTML structure and includes the loading provider, while <code>page.tsx</code> defines the main content.</p>"},{"location":"component-customization/#1-layouttsx","title":"1. <code>layout.tsx</code>","text":"<p>This file provides the base structure of every page in the application.  It sets up global styles, fonts, and wraps the entire page content with a loading provider to manage the loading state.</p> <pre><code>// layout.tsx\nexport default function RootLayout({ children }) {\n    return (\n        &lt;html lang=\"en\" className={`${dmSans.className} ${robotoSlab.className} min-h-screen scroll-smooth`}&gt;\n            &lt;body cz-shortcut-listen=\"true\" className=\"font-dm min-h-screen\"&gt;\n                &lt;LoadingProvider&gt; {children} &lt;/LoadingProvider&gt;\n            &lt;/body&gt;\n        &lt;/html&gt;\n    );\n}\n</code></pre> <p>The <code>children</code> prop within <code>RootLayout</code> is where the content from <code>page.tsx</code> is rendered.  The <code>LoadingProvider</code> from <code>./context/index.tsx</code> wraps the children, providing loading state management across the whole app.</p>"},{"location":"component-customization/#2-pagetsx","title":"2. <code>page.tsx</code>","text":"<p>This file defines the main content displayed on the homepage. It conditionally renders a loading indicator (<code>&lt;Loading /&gt;</code>) if the loading state is true and then renders the actual page components otherwise.</p> <pre><code>// page.tsx\nconst page = () =&gt; {\n    // ...loading state management...\n    return (\n        &lt;&gt;\n            {loading ? (\n                &lt;Loading /&gt;\n            ) : (\n                &lt;&gt;\n                    &lt;Header /&gt;\n                    &lt;HeroBanner /&gt;\n                    &lt;About /&gt;\n                    &lt;Services /&gt;\n                    &lt;Process /&gt;\n                    &lt;Testimonials /&gt;\n                    &lt;ContactForm /&gt;\n                    &lt;Footer /&gt;\n                    &lt;ToastContainer position=\"top-right\" {...toastConfig} /&gt;\n                &lt;/&gt;\n            )}\n        &lt;/&gt;\n    );\n};\n</code></pre> <p>This illustrates the sequence of components rendered on the page. Each component is a separate reusable component likely defined in the <code>./_components</code> directory.</p> <p>Each component (<code>Header</code>, <code>HeroBanner</code>, etc.) is likely defined in a separate file under the <code>./_components</code> directory.  The <code>ToastContainer</code> is from the <code>react-toastify</code> library and is used for displaying notifications.</p>"},{"location":"component-customization/#ii-component-customization","title":"II. Component Customization","text":"<p>This section details how to customize the individual components of the Mechano car repair website template.  Remember to restart the development server (<code>npm run dev</code> or <code>yarn dev</code>) after making changes to see the updates reflected in your browser.</p> <p>Note:  Without access to the source code of the individual components (<code>Header.tsx</code>, <code>HeroBanner.tsx</code>, etc.),  specific prop names and styling details cannot be provided. The following is a general guide based on common practices and the overall structure of the application.  You will need to examine the source code of each component for precise customization instructions.</p>"},{"location":"component-customization/#1-general-customization-approach","title":"1. General Customization Approach","text":"<p>Most components will likely accept props to customize their behavior and appearance. These props are passed as attributes when the component is used in <code>page.tsx</code>.  For example:</p> <pre><code>// Hypothetical example \u2013 adjust based on actual component props.\n&lt;HeroBanner title=\"New Title\" tagline=\"Updated Tagline\" imageSrc=\"/new-image.jpg\" /&gt;\n</code></pre>"},{"location":"component-customization/#2-styling-with-tailwind-css","title":"2. Styling with Tailwind CSS","text":"<p>The template likely uses Tailwind CSS. Customization options include:</p> <ul> <li>Overriding existing classes: Replace existing Tailwind classes with different ones.</li> <li>Adding custom classes: Define your custom classes in globals.css or within the component itself. Inline styles: Use inline styles (less recommended for maintainability).</li> </ul>"},{"location":"component-customization/#3-content-updates","title":"3. Content Updates","text":"<p>Update content by modifying prop values passed to the components or directly editing the content within the component's TSX file.</p> <p>For instance, to change text in a button within <code>ContactForm.tsx</code>, you might need to pass a buttonText prop (or a similar prop, depending on the component's implementation).</p>"},{"location":"getting-started/","title":"Getting started","text":""},{"location":"getting-started/#overview","title":"Overview","text":"<p>This section guides you through the installation and setup process after downloading the Mechano car repair website template.  Before you begin, ensure you have Node.js and npm (or yarn) installed on your system. You can download them from Node.js official website.  </p>"},{"location":"getting-started/#i-extracting-the-template","title":"I. Extracting the Template","text":"<p>After downloading the template, extract the downloaded archive (likely a <code>.zip</code> file) to a location on your computer where you keep your project files.  This will create a directory, likely named <code>car-repair-template</code> (or similar, depending on how you named the file during download).</p>"},{"location":"getting-started/#ii-navigating-to-the-project-directory","title":"II. Navigating to the Project Directory","text":"<p>Open your terminal or command prompt and navigate to the extracted project directory using the <code>cd</code> command.  For example:</p> <pre><code>cd /path/to/your/car-repair-template\n</code></pre> <p>Replace <code>/path/to/your/</code> with the actual path to the directory on your system.</p>"},{"location":"getting-started/#iii-installing-dependencies","title":"III. Installing Dependencies","text":"<p>Next, install the necessary project dependencies using npm or yarn. The <code>package.json</code> file lists the required packages:</p> <pre><code>npm install\n# or\nyarn install\n</code></pre> <p>This command will download and install all the necessary libraries listed in <code>package.json</code>, including Next.js, React, Tailwind CSS, and other supporting packages.  This might take a few minutes depending on your internet connection speed.</p>"},{"location":"getting-started/#iv-running-the-development-server","title":"IV. Running the Development Server","text":"<p>Once the installation is complete, start the development server using the following command:</p> <pre><code>npm run dev\n# or\nyarn dev\n</code></pre> <p>This will initiate a local development server. You can then access the website in your browser at <code>http://localhost:3000</code>. Changes made to the code will automatically trigger a rebuild and refresh of the page in your browser, thanks to Next.js's hot-reloading feature.</p>"},{"location":"getting-started/#v-building-for-production","title":"V. Building for Production","text":"<p>To build the application for production deployment to a hosting provider, run:</p> <pre><code>npm run build\n# or\nyarn build\n</code></pre> <p>This creates an optimized build of your application in the <code>.next</code> directory, ready for deployment.</p>"},{"location":"getting-started/#vi-starting-the-production-server","title":"VI. Starting the Production Server","text":"<p>After building, you can start the production server (though this is usually done on the hosting server itself, not locally). The command is:</p> <pre><code>npm start\n# or\nyarn start\n</code></pre> <p>We hope this guide helps you get started with the Mechano car repair template.  Happy building!</p>"},{"location":"loading-mechanism/","title":"Loading Mechanism","text":"<p>This section provides a detailed explanation of the loading mechanism and context implementation within the Mechano template. This mechanism manages the display of a loading indicator during application initialization, resulting in a smoother user experience.</p>"},{"location":"loading-mechanism/#i-context-api-for-state-management-indextsx","title":"I. Context API for State Management (<code>index.tsx</code>)","text":"<p>The core of the loading mechanism is React's Context API, implemented in <code>index.tsx</code>. This approach centralizes the loading state, making it easily accessible across the entire application without prop drilling.</p> <ol> <li>Defining the Context Type: The <code>LoadingContextType</code> interface defines the shape of the context object:</li> </ol> <pre><code>interface LoadingContextType {\n    loading: boolean;\n    setLoading: (loading: boolean) =&gt; void;\n}\n</code></pre> <p>This clearly specifies that the context will hold a boolean <code>loading</code> flag and a function <code>setLoading</code> to update it.</p> <ol> <li>Creating the Context: <code>createContext</code> creates the context object itself:</li> </ol> <pre><code>const LoadingContext = createContext&lt;LoadingContextType | undefined&gt;(undefined);\n</code></pre> <p>The <code>undefined</code> default value indicates that the context's value is not yet defined outside the provider.</p> <ol> <li>The Provider (<code>LoadingProvider</code>):  The <code>LoadingProvider</code> component is crucial; it makes the loading state available to all components within its scope.</li> </ol> <pre><code>export const LoadingProvider = ({ children }: LoadingProviderProps) =&gt; {\n    const [loading, setLoading = useState&lt;boolean&gt;(true);\n    useEffect(() =&gt; {\n        requestAnimationFrame(() =&gt; {\n            window.scrollTo(0, 0);\n        });\n    }, [loading]);\n    return (\n        &lt;LoadingContext.Provider value={{ loading, setLoading }}&gt;\n            {children}\n        &lt;/LoadingContext.Provider&gt;\n    );\n};\n</code></pre> <ul> <li><code>useState(true)</code> initializes the <code>loading</code> state to <code>true</code>\u2014signifying that loading is in progress when the application first starts.</li> <li>The <code>useEffect</code> hook with <code>requestAnimationFrame</code> ensures that after any change to the <code>loading</code> state, the page will scroll to the top. This is a helpful touch for a better UX.</li> <li> <p>The <code>LoadingContext.Provider</code> makes the <code>loading</code> state and the <code>setLoading</code> function available to all components nested within it.</p> </li> <li> <p>Custom Hook for Easy Access (<code>UseLoading</code>): The <code>UseLoading</code> hook simplifies access to the context:</p> </li> </ul> <pre><code>export const UseLoading = (): LoadingContextType =&gt; {\n    const context = useContext(LoadingContext);\n    if (context === undefined) {\n        throw new Error(\"useLoading must be used within a LoadingProvider\");\n    }\n    return context;\n};\n</code></pre> <p>This hook retrieves the context value using <code>useContext</code>.  The error handling is crucial; it prevents components outside the <code>LoadingProvider</code> from attempting to access the context\u2014ensuring that the loading state is managed correctly and preventing unexpected behavior.</p>"},{"location":"loading-mechanism/#ii-visual-loading-indicator-loadingtsx","title":"II. Visual Loading Indicator (<code>loading.tsx</code>)","text":"<p>The <code>loading.tsx</code> file defines the visual representation of the loading state:</p> <pre><code>//loading.tsx\nconst Loading = () =&gt; {\n    return (\n        &lt;div className=\"w-screen h-screen fixed inset-0 flex items-center justify-center bg-white z-50 flex-col gap-4\"&gt;\n            &lt;div className=\"w-12 h-12 border-4 border-accent border-t-transparent rounded-full animate-spin\"&gt;&lt;/div&gt;\n            &lt;p className=\"text-lg font-slab text-accent\"&gt;Loading...&lt;/p&gt;\n        &lt;/div&gt;\n    );\n};\n</code></pre> <p>This component renders a visually appealing spinner and text overlaying the main content, clearly signaling that the application is loading. The CSS classes handle positioning, styling, and animation.</p>"},{"location":"loading-mechanism/#iii-orchestration-pagetsx-and-layouttsx","title":"III.  Orchestration (<code>page.tsx</code> and <code>layout.tsx</code>)","text":"<ol> <li> <p><code>layout.tsx</code>: The <code>LoadingProvider</code> is placed in <code>layout.tsx</code> to wrap the entire application's content:</p> <pre><code>//layout.tsx\n&lt;LoadingProvider&gt;{children}&lt;/LoadingProvider&gt;\n</code></pre> <p>This makes the loading context available to every component within the application.</p> </li> <li> <p><code>page.tsx</code>: The <code>page.tsx</code> file uses the <code>UseLoading</code> hook and conditionally renders the <code>Loading</code> component:</p> <pre><code>//page.tsx\nconst page = () =&gt; {\n    const { loading, setLoading } = UseLoading();\n    useEffect(() =&gt; {\n        const timer = setTimeout(() =&gt; {\n            setLoading(false);\n        }, 1000); // Simulates a 1-second load\n        return () =&gt; clearTimeout(timer);\n    }, []); //Empty dependency array ensures it runs once after mount.\n    return (\n        &lt;&gt;\n            {loading ? &lt;Loading /&gt; :  /* Rest of page content */}\n        &lt;/&gt;\n    );\n};\n</code></pre> <p>The <code>useEffect</code> hook with an empty dependency array simulates a loading process.  After 1000 milliseconds (1 second), <code>setLoading(false)</code> is called, causing the <code>Loading</code> component to unmount.  The conditional rendering (<code>{loading ? &lt;Loading /&gt; : ...}</code>) ensures the loading indicator is only displayed while the <code>loading</code> state is <code>true</code>.</p> </li> </ol> <p>This detailed explanation clarifies the interplay between the context, the loading indicator, and the conditional rendering.  The carefully chosen approach makes for a highly effective and well-structured loading mechanism.</p>"},{"location":"motion-usage/","title":"Motion usage","text":""},{"location":"motion-usage/#a-customization-motion-animations","title":"A. Customization: Motion Animations","text":""},{"location":"motion-usage/#i-motion-fundamentals","title":"I. Motion Fundamentals","text":"<ul> <li><code>motion</code> Components: Wrap React components (e.g., <code>&lt;motion.div&gt;</code>, <code>&lt;motion.h1&gt;</code>) to enable animations.</li> <li><code>animate</code> prop: Defines the animation's target state.</li> <li><code>initial</code> prop: Sets the component's initial state.</li> <li><code>transition</code> prop: Controls animation speed, easing, and timing.</li> <li>Variants: Manage multiple animation states.</li> </ul>"},{"location":"motion-usage/#ii-customizing-existing-animations","title":"II. Customizing Existing Animations","text":"<ol> <li>Locate Animation Code: Find components using Motion in <code>_components/*.tsx</code> (look for <code>&lt;motion. ...&gt;</code> components).</li> <li>Inspect Animation Properties: Identify <code>animate</code>, <code>initial</code>, and <code>transition</code> props and their values.</li> <li>Modify Animation Parameters: Adjust these properties:<ul> <li><code>opacity</code></li> <li><code>x</code>, <code>y</code>, <code>scale</code>, <code>rotate</code></li> <li><code>duration</code>, <code>ease</code></li> </ul> </li> </ol> <p>Example (Hypothetical):</p> <pre><code>&lt;motion.div\n       animate={{ opacity: 1, y: 0, transition: { duration: 1, ease: \"easeInOut\" } }}\n       initial={{ opacity: 0, y: 20 }}\n&gt;\n       {/* Content */}\n&lt;/motion.div&gt;\n</code></pre>"},{"location":"motion-usage/#b-animating-with-whileinview","title":"B.  Animating with <code>whileInView</code>","text":"<p>The <code>Services</code> component in <code>Services.tsx</code> leverages Motion's <code>whileInView</code> prop to create animations triggered by an element's visibility within the browser viewport.  This enhances user experience by displaying animations only when the relevant section is visible.</p>"},{"location":"motion-usage/#i-how-whileinview-works","title":"I.  How <code>whileInView</code> Works","text":"<p>Framer Motion's <code>whileInView</code> prop is used to apply animations to an element only while that element is visible within the browser's viewport.  This eliminates the need for manual event listeners or complex JavaScript to manage animation visibility.</p> <p>The <code>whileInView</code> prop takes an object containing the animation properties to be applied while the element is in view. When the element is no longer visible in the viewport, the animation will not run, although you can manage what happens when it is out of view with the <code>animate</code> property.</p>"},{"location":"motion-usage/#ii-implementation-in-servicestsx","title":"II.  Implementation in <code>Services.tsx</code>","text":"<p>Within <code>Services.tsx</code>, the <code>whileInView</code> prop is used in two places:</p> <ol> <li> <p>Section Header:  The header section containing the title and description is wrapped in a <code>motion.div</code> with the <code>whileInView</code> prop.</p> <pre><code>&lt;motion.div\n    initial={{ opacity: 0, y: -100 }}\n    whileInView={{ opacity: 1, y: 0 }}\n    transition={{ duration: 0.5, ease: \"easeInOut\" }}\n    viewport={{ once: true }}\n    className=\"mb-12 md:flex md:justify-between md:items-center gap-8\"\n&gt;\n    {/* Header content */}\n&lt;/motion.div&gt;\n</code></pre> <p>This animation fades in the header and moves it from off-screen to its final position.</p> </li> <li> <p>Service Cards: Each service card is also wrapped in a <code>motion.div</code> utilizing the <code>whileInView</code> prop. The staggered animation effect is achieved by adding a delay based on the index of each card.</p> <pre><code>&lt;motion.div\n    key={index}\n    initial={{ opacity: 0, y: 80 }}\n    whileInView={{ opacity: 1, y: 0 }}\n    transition={{ duration: 0.5, delay: index * 0.1 }}\n    viewport={{ once: true }}\n    className=\"bg-white rounded-lg ...\"\n&gt;\n    {/* Service card content */}\n&lt;/motion.div&gt;\n</code></pre> <p>This animation similarly fades in each card from the bottom of the screen.  The stagger effect means the cards will animate one after another rather than all at once.</p> </li> </ol>"},{"location":"motion-usage/#iii-key-properties-used","title":"III.  Key Properties Used","text":"<ul> <li> <p><code>initial</code>: Defines the element's initial state (before it's in view).  This is used to define the starting position of the animation, often off-screen.</p> </li> <li> <p><code>whileInView</code>: Defines the animation state while the element is in view.  This controls the final position and visibility of the element.</p> </li> <li> <p><code>transition</code>:  Controls the animation's speed and timing function (<code>duration</code> and <code>ease</code>).</p> </li> <li> <p><code>viewport</code>:  With <code>{ once: true }</code>, ensures the animation runs only once when the element first enters the viewport.</p> </li> </ul>"},{"location":"motion-usage/#iv-customizing-whileinview-animations","title":"IV.  Customizing <code>whileInView</code> Animations","text":"<p>You can customize these animations by modifying the values within the <code>initial</code> and <code>whileInView</code> properties.  Experiment with different values for <code>opacity</code>, <code>x</code>, <code>y</code>, <code>scale</code>, and other Framer Motion animation properties.  Consult the Framer Motion documentation (https://www.framer.com/motion/) for a complete list of options and advanced animation techniques.</p> <p>This detailed explanation should help you understand and customize the <code>whileInView</code> animations used in the <code>Services</code> component. Remember to consult the Framer Motion documentation for more advanced animation techniques.</p>"},{"location":"styling-configuration/","title":"Styling Configuration","text":"<p>This section details the styling configuration used in the Mechano car repair template, leveraging Tailwind CSS v4. The styling is defined primarily in <code>globals.css</code>. The tailwind V4 does not require a separate <code>tailwind.config.js</code> file and all of your design tokens exposed as native CSS variables so you can access them anywhere.</p>"},{"location":"styling-configuration/#i-globalscss-breakdown","title":"I.  <code>globals.css</code> Breakdown","text":"<p>The <code>globals.css</code> file contains:</p> <ol> <li> <p>Tailwind Import: <code>@import \"tailwindcss\";</code> This line imports the core Tailwind CSS styles.</p> </li> <li> <p>Theme Configuration:  A <code>@theme</code> block defines custom CSS variables:</p> <pre><code>@theme {\n    --color-accent: #405FF2;\n    --font-dm: \"DM Sans\", \"sans-serif\";\n    --font-slab: \"Roboto Slab\", \"sans-serif\";\n}\n</code></pre> <p>These variables (<code>--color-accent</code>, <code>--font-dm</code>, <code>--font-slab</code>) are used throughout the CSS to maintain consistency and ease of modification.  Changing these variables in one place will automatically update their usage throughout the project.</p> </li> <li> <p>Custom Component Styles (using <code>@layer components</code>):  This section defines reusable style classes:</p> <p><pre><code>@layer components {\n    .btn-transition { @apply transition-all duration-500 ease-in-out; }\n    .box-padding { @apply px-6 md:px-8 lg:px-12 py-4 md:py-8 lg:py-14; }\n}\n</code></pre> The <code>@apply</code> directive in Tailwind CSS v4 applies pre-defined utility classes to custom classes.</p> </li> <li> <p>Specific Component Styles: Styles are defined for <code>.header-effect</code>, and  <code>.testimonials-swiper</code>  (likely affecting the header and testimonial slider respectively).  These show how to apply custom styling outside of the <code>@layer components</code> section, targeting specific sections. Note the use of keyframes for animation.</p> </li> </ol>"},{"location":"styling-configuration/#ii-postcss-configuration-postcssconfigmjs","title":"II.  PostCSS Configuration (<code>postcss.config.mjs</code>)","text":"<p>This file configures PostCSS, a tool that processes CSS.  In this project, it's primarily used to integrate Tailwind CSS:</p> <pre><code>// postcss.config.mjs\nconst config = {\n    plugins: {\n        \"@tailwindcss/postcss\": {},\n    },\n};\nexport default config;\n</code></pre> <p>This configuration indicates that the <code>@tailwindcss/postcss</code> plugin is used. This plugin is essential for Tailwind to work correctly with your project's CSS.</p>"},{"location":"styling-configuration/#iii-customizing-styles","title":"III.  Customizing Styles","text":"<p>To customize the styles, you can:</p> <ol> <li>Modify existing classes: Change or replace existing Tailwind classes within your component's TSX.</li> <li>Create new classes: Define new custom classes in <code>globals.css</code> using Tailwind's utility classes or add them directly to components using the <code>className</code> attribute.</li> <li>Modify the <code>globals.css</code> file:  Adjust the theme, extend Tailwind's functionality with plugins, or modify other configuration options to change the default styles. Consult the official Tailwind CSS documentation for details on customizing your <code>globals.css</code> file.</li> </ol> <p>Remember to restart your development server after making changes to <code>globals.css</code>.</p> <p>This detailed explanation, combined with the provided code snippets and the official Tailwind CSS documentation, will help you effectively customize the styling of your Mechano website.</p>"},{"location":"support_resources/","title":"Support &amp; Resources","text":"<p>This section provides resources to help you get the most out of the Mechano car repair website template.</p>"},{"location":"support_resources/#1-troubleshooting","title":"1.  Troubleshooting","text":"<p>If you encounter issues while using the template, consider these troubleshooting steps:</p> <ol> <li> <p>Check the Console: Open your browser's developer console (usually by pressing F12) to check for JavaScript errors or warnings.  These messages often pinpoint the source of problems.</p> </li> <li> <p>Review the Documentation: Carefully review this documentation to ensure you've followed the installation and customization instructions correctly.</p> </li> <li> <p>Verify Dependencies: Make sure all necessary packages are installed correctly. Run <code>npm install</code> or <code>yarn install</code> to ensure all dependencies are up-to-date.</p> </li> <li> <p>Restart the Development Server: Sometimes, a simple restart of the development server (<code>npm run dev</code> or <code>yarn dev</code>) resolves temporary issues.</p> </li> <li> <p>Check Your Code: Review your code for any syntax errors, typos, or logical flaws in your customizations.</p> </li> <li> <p>Examine Network Requests: Use your browser's developer tools to check for any failed network requests.  This may indicate issues with image loading or API calls (if applicable).</p> </li> <li> <p>Simplify Your Customizations: If you're experiencing errors after making substantial changes, try reverting your customizations incrementally to identify the source of the problem.</p> </li> </ol>"},{"location":"support_resources/#2-nextjs-resources","title":"2.  Next.js Resources","text":"<p>For more in-depth information on Next.js, refer to the official Next.js documentation:</p> <p>https://nextjs.org/docs</p>"},{"location":"support_resources/#3-tailwind-css-resources","title":"3.  Tailwind CSS Resources","text":"<p>For assistance with Tailwind CSS, consult the official Tailwind CSS documentation:</p> <p>https://tailwindcss.com/docs</p>"},{"location":"support_resources/#4-framer-motion-resources","title":"4.  Framer Motion Resources","text":"<p>If you have questions about using Framer Motion for animations, refer to the official Framer Motion documentation:</p> <p>https://www.framer.com/motion/</p>"},{"location":"support_resources/#5-react-resources","title":"5.  React Resources","text":"<p>For general React development questions, you may find helpful resources at:</p> <p>https://react.dev/</p>"},{"location":"support_resources/#6-author-support","title":"6.  Author Support","text":"<p>If you still need assistance, consider contacting through author profile or the comments &amp; reviews section.</p> <p>This Support and Resources section aims to provide you with information needed to successfully use and customize the Mechano car repair website template.</p>"}]}